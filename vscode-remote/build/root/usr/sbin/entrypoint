#!/bin/bash

set -ex
set -o pipefail

function Log() {
    local msg="`date '+%Y/%m/%d %H:%M:%S'` $1"
    echo ${msg}
}

Log "Entrypoint script start..."

# Reconfigure openssh server for security
dpkg-reconfigure --frontend noninteractive openssh-server

# Set coder's Password
if [ -n "${SSH_CODER_PASSWORD}" ]; then
    echo "coder:${SSH_CODER_PASSWORD%%:*}" | chpasswd
    Log "change password: Password for user 'coder' has changed to SSH_CODER_PASSWORD."
fi


# Set coder's Keypair
chown -R coder:coder /home/coder
if [ ! -f /home/coder/.ssh/authorized_keys ]; then
    if [ -n "${SSH_CODER_PUBLICKEY}" ]; then
        runuser -u coder -- sh -c "mkdir ~/.ssh && echo ${SSH_CODER_PUBLICKEY} >> ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys"
        Log "add publickey: Publickey SSH_CODER_PUBLICKEY has added to user 'coder'."
    else
    # Generate SSH Keypair for coder
        runuser -u coder -- sh -c "ssh-keygen -t ed25519 -N '' -f ~/.ssh/id_ed25519 && cat ~/.ssh/id_ed25519.pub >> ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys"
        Log "generate SSH keys: Generate SSH keys at /home/coder/.ssh/id_ed25519, use it to login as user 'coder'."
    fi
else
    Log "The file /home/coder/.ssh/authorized_keys already exists, so ignore SSH_CODER_PUBLICKEY and do nothing."
fi

Log "Entrypoint script end."

exec "$@"